#include<iostream>
#include<vector>
#include<set>
using namespace std;

typedef long long ll;
typedef double long db;
typedef string str;

// 1 5 11 5
bool canPartition(vector<int>& nums) {
    int sum = 0;
    for(int i = 0; i < nums.size(); i++) {
        sum = sum + nums[i];
    }
    int target = sum/2;
    if(sum%2 != 0) {
        return false;
    }
    set<int> dp;
    dp.insert(0);
    for(int i = 0; i < nums.size(); i++) {
        set<int> nextDP;
        for(auto temp : dp) {
            nextDP.insert(temp);
            nextDP.insert(temp + nums[i]);
        }
        dp = nextDP;
    }
    return dp.find(target) != dp.end();
}

int main()
{
ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0) ;
 #ifndef ONLINE_JUDGE
   freopen("main.inp", "r", stdin);
   freopen("main.out", "w", stdout);
#endif
    vector<int> nums = {};
    if(canPartition(nums)) cout << "YES";
    else cout << "NO";
    vector<int> s = {};
    long long sum = 0;
    for(int i = 0; i < s.size(); i++) {
        sum += nums[i];
    }
    cout << " " << sum;
}